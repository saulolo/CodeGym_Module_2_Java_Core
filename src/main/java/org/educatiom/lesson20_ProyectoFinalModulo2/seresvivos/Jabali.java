package org.educatiom.lesson20_ProyectoFinalModulo2.seresvivos;

import org.educatiom.lesson20_ProyectoFinalModulo2.modelo.Isla;
import org.educatiom.lesson20_ProyectoFinalModulo2.modelo.Ubicacion;

/**
 * Representa una especie de Jabal칤 en la simulaci칩n, extendiendo las capacidades de un {@link Herbivoro}.
 * Define las caracter칤sticas espec칤ficas de los jabal칤es como su peso, l칤mite por ubicaci칩n,
 * velocidad m치xima, comida necesaria y su representaci칩n Unicode.
 */
public class Jabali extends Herbivoro{

    private static final double PESO_DEFECTO = 400;
    private static final int MAX_POR_UBICACION_DEFECTO = 50;
    private static final int VELOCIDAD_MAX_DEFECTO = 2;
    private static final double COMIDA_NECESARIA_DEFECTO = 50;
    private static final String UNICODE = "游냉";

    /**
     * Constructor para crear una nueva instancia de Jabal칤.
     * Inicializa el Jabal칤 con los valores por defecto de peso, m치ximo por ubicaci칩n,
     * velocidad m치xima y comida necesaria, y establece su especie.
     */
    public Jabali() {
        super(PESO_DEFECTO, MAX_POR_UBICACION_DEFECTO, VELOCIDAD_MAX_DEFECTO, COMIDA_NECESARIA_DEFECTO);
    }

    @Override
    public void comer(Ubicacion ubicacionActual, Isla isla) {
        System.out.println("El Jabal칤 " + this.hashCode() + " est치 intentando comer en " + ubicacionActual);
        super.comer(ubicacionActual, isla); // Llama a la l칩gica de comer de Herbivoro (para comer plantas)
    }

    /**
     * Define el comportamiento de movimiento de un Jabal칤.
     * Actualmente, solo imprime un mensaje indicando que el Jabal칤 intenta moverse.
     * La l칩gica real de movimiento deber칤a delegarse a la superclase {@link Animal}.
     *
     * @param ubicacionActual La {@link Ubicacion} actual del Jabal칤.
     * @param isla La {@link Isla} en la que se encuentra el Jabal칤.
     */
    @Override
    public void moverse(Ubicacion ubicacionActual, Isla isla) {
        System.out.println("El Jabal칤 " + this.hashCode() + " est치 intentando moverse desde " + ubicacionActual);
        super.moverse(ubicacionActual, isla); // Llama a la l칩gica de movimiento de Animal
    }

    /**
     * Define el comportamiento de reproducci칩n de un Jabal칤.
     * Un Jabal칤 intenta reproducirse si hay al menos dos Jabal칤es en la misma ubicaci칩n
     * y la ubicaci칩n tiene espacio para una nueva cr칤a de Jabal칤.
     *
     * @param ubicacionActual La {@link Ubicacion} actual donde el Jabal칤 intenta reproducirse.
     * @return Una nueva instancia de {@link Jabali} si la reproducci칩n es exitosa, de lo contrario, {@code null}.
     */
    @Override
    public Animal reproducirse(Ubicacion ubicacionActual) {
        System.out.println("El Jabal칤 " + this.hashCode() + " est치 intentando reproducirse en " + ubicacionActual);

        // Se verifica que el jabal칤 no tenga demasiada hambre para reproducirse.
        if (this.getNivelHambre() >= this.getComidaNecesaria() * 0.5) {
            return null; // Un jabal칤 hambriento no se reproduce.
        }

        // Cuenta la cantidad de jabal칤es en la ubicaci칩n actual.
        long jabaliesPresentes = ubicacionActual.contarAnimalesDeEspecie(this.getEspecie());

        // Si hay al menos dos jabal칤es y la ubicaci칩n puede aceptar m치s de esta especie.
        if (jabaliesPresentes >= 2 && ubicacionActual.puedeAgregarAnimal(this.getEspecie(), this.maxPorUbicacion)) {
            return new Jabali(); // Retorna una nueva cr칤a de Jabal칤.
        }
        return null; // No se reproduce.
    }

    /**
     * Obtiene el car치cter Unicode que representa a un Jabal칤.
     *
     * @return El String Unicode para un Jabal칤.
     */
    @Override
    public String getUnicode() {
        return UNICODE;
    }
}
